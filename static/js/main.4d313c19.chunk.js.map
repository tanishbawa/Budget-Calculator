{"version":3,"sources":["Components/Alert.js","Components/Form.js","Components/Item.js","Components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["Alert","type","text","className","Form","charge","amount","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","id","name","placeholder","value","onChange","Item","expense","handleDelete","handleEdit","aria-label","onClick","Lists","expenses","clearItems","map","key","length","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","handleAlert","setTimeout","event","target","preventDefault","tempExpenses","item","singleExpense","uuid","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d313c19.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Alert = ({type, text}) => {\r\n    return (\r\n        <div className={`alert alert-${type}`}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react'\r\n\r\nimport {MdSend} from 'react-icons/md';\r\n\r\nconst Form = ({\r\n    charge,\r\n    amount, \r\n    handleCharge, \r\n    handleAmount, \r\n    handleSubmit,\r\n    edit\r\n}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-center\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"charge\">charge</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        id=\"charge\" \r\n                        name=\"charge\"\r\n                        placeholder=\"e.g. rent\"\r\n                        value={charge}\r\n                        onChange={handleCharge}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"amount\">amount</label>\r\n                    <input \r\n                        type=\"number\" \r\n                        className=\"form-control\" \r\n                        id=\"amount\" \r\n                        name=\"amount\"\r\n                        placeholder=\"e.g. 100\"\r\n                        value={amount}\r\n                        onChange={handleAmount}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn\">\r\n                {edit ? 'edit' : 'submit'}\r\n                <MdSend className=\"btn-icon\" />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n\r\n","import React from 'react'\r\n\r\nimport {MdEdit, MdDelete} from 'react-icons/md';\r\n\r\nconst Item = ({expense, handleDelete, handleEdit}) => {\r\n    const {id, charge, amount} = expense;\r\n    return (\r\n        <li className=\"item\">\r\n            <div className=\"info\">\r\n                <span className=\"expense\">{charge}</span>\r\n                <span className=\"amount\">â‚¹{amount}</span>\r\n            </div>\r\n            <div>\r\n                <button className=\"edit-btn\" aria-label=\"edit button\" onClick={() => handleEdit(id)}>\r\n                    <MdEdit />\r\n                </button>\r\n                <button className=\"clear-btn\" aria-label=\"delete button\" onClick={() => handleDelete(id)}>\r\n                    <MdDelete />\r\n                </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Item;\r\n\r\n","import React from 'react';\r\nimport Item from './Item';\r\n\r\nimport {MdDelete} from 'react-icons/md';\r\n\r\nconst Lists = ({expenses, handleEdit, handleDelete, clearItems}) => {\r\n    return (\r\n        <>\r\n            <ul className=\"list\">\r\n                {expenses.map((expense) => {\r\n                    return <Item key={expense.id} \r\n                                 expense={expense} \r\n                                 handleDelete={handleDelete}\r\n                                 handleEdit={handleEdit}\r\n                                 />\r\n                })}\r\n            </ul>\r\n            {expenses.length > 0 && (\r\n            <button className=\"btn\" onClick={clearItems}>\r\n                    Clear Expenses\r\n                    <MdDelete className=\"btn-icon\" />\r\n                </button>)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Lists;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport uuid from 'react-uuid';\n\nimport Alert from './Components/Alert';\nimport Form from './Components/Form';\nimport List from './Components/Lists';\n\n\n// const initialExpenses = [\n//   {id: uuid(), charge:\"rent\", amount: 1600},\n//   {id: uuid(), charge:\"car payment\", amount: 400},\n//   {id: uuid(), charge:\"credit card bill\", amount: 1200}\n// ];\n\nconst initialExpenses = localStorage.getItem('expenses') \n  ? JSON.parse(localStorage.getItem(\"expenses\")) \n  : [];\n\n\nfunction App() {\n  // ************************* state values ************************\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses);\n\n  // single expense\n  const [charge, setCharge] = useState(\"\");\n  // single amount\n  const [amount, setAmount] = useState(\"\");\n\n  //alert\n  const [alert ,setAlert] = useState({show: false});\n\n  //edit\n  const [edit, setEdit] = useState(false);\n  //edit item\nconst [id, setId] = useState(0);\n \n  // ************************* UseEffect ************************\n  useEffect(() => {\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  },[expenses]);\n\n\n  // ************************* functionality ************************\n  const handleCharge = (event) => {\n    setCharge(event.target.value);\n  };\n  const handleAmount = (event) => {\n    setAmount(event.target.value);\n  };\n\n  //handle Alert\n  const handleAlert = ({type, text}) => {\n    setAlert({show: true, type, text});\n    setTimeout(() => {\n      setAlert({show: false});\n    }, 5000)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if(charge !== \"\" && amount > 0) {\n      if(edit) {\n        let tempExpenses = expenses.map(item => {\n          return item.id === id ? {...item, charge, amount} : item\n        });\n        setExpenses(tempExpenses);\n        setEdit(false);\n        handleAlert({ type: \"success\" , text: \"Item Edited\" })\n      } else {\n        const singleExpense = { id: uuid(), charge, amount};\n        setExpenses([...expenses, singleExpense]);\n        handleAlert({type: \"success\", text: \"item added\"});\n      }\n\n      setCharge(\"\");\n      setAmount(\"\");\n    }else {\n      //handle alert called\n      handleAlert({type: \"danger\", text: `charge can't be empty value and amount should be greater then 0`});\n    }\n  }\n\n  // clear all items\n  const clearItems = () => {\n    setExpenses([]);\n    handleAlert({type: \"danger\", text: \"All items deleted\"});\n  }\n\n  //handle delete\n  const handleDelete = (id) => {\n    let tempExpenses = expenses.filter(item => item.id !== id);\n    setExpenses(tempExpenses);\n    handleAlert({type: \"danger\", text: \"item-deleted\"});\n  }\n  //handle Edit\n  const handleEdit = (id) => {\n    let expense = expenses.find(item => item.id === id)\n    let {charge, amount} = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  }\n\n  \n  return (\n    <>\n    {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <Alert />\n      <h1>Budget Calculator</h1>  \n      <main className=\"App\">\n        <Form charge={charge}\n              amount={amount}\n              handleAmount={handleAmount}\n              handleCharge={handleCharge}\n              handleSubmit={handleSubmit} \n              edit={edit}\n          />\n\n        <List expenses={expenses} \n              handleDelete={handleDelete} \n              handleEdit={handleEdit} \n              clearItems={clearItems} \n          />\n      </main>\n      <h1>Total Spending : <span className=\"total\">\n          â‚¹{expenses.reduce((acc, curr) => {\n            return (acc += parseInt(curr.amount));\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}